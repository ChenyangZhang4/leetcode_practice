/**********
39. Combination Sum

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
**********/

//12ms
void FindCombination(vector<int> &c, vector<vector<int>> &res, vector<int> &v, int i, int target) {
    if (target < 0) {     //using 0 rather than using c[i]
        return;
    }
    else if (target == 0) {
        res.push_back(v);
        return;
    }
    else {
        for (int j = i; j<c.size(); j++) {
            v.push_back(c[j]);       //j rather than i
            FindCombination(c, res, v, j, target - c[j]);
            v.pop_back();
        }
    }
}
vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>> res;
    vector<int> v;
    sort(candidates.begin(), candidates.end());
    FindCombination(candidates, res, v, 0, target);
    return res;
}
