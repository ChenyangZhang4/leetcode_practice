/**********
437. Path Sum III

You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
**********/

//28ms
int count=0;
int pathSum(TreeNode* root, int sum) {
    if(!root)
        return 0;
    HasPath(root, sum);
    pathSum(root->left, sum);
    pathSum(root->right, sum);
    return count;
}
void HasPath(TreeNode* root, int needVal){
    if(!root)
        return;
    if(root->val == needVal)
        count++;
    HasPath(root->left, needVal-root->val);
    HasPath(root->right, needVal-root->val);
}

//20ms
int res = 0;
vector<int> ans;
int pathSum(TreeNode* root, int sum) {
    if(!root) return 0;
    subSum(root,sum);
    return res;
}
void subSum(TreeNode* root,int sum){
    if(!root) return;
    ans.push_back(root->val);
    subSum(root->left,sum);
    subSum(root->right,sum);
    int cur = 0;
    for(int i=ans.size()-1;i>=0;i--){
        cur += ans[i];
        if(cur == sum) ++res;
    }
    ans.pop_back();
}
