/**********
104. Maximum Depth of Binary Tree

Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.
**********/

int maxDepth(TreeNode* root) {
    if(!root)
        return 0;
    return 1 + max(maxDepth(root->left), maxDepth(root->right));
}

//16ms, Non-recursive
int maxDepth(TreeNode* root) {
    int depth = 0;
    if (!root) return depth;
    queue<TreeNode*> level;
    level.push(root);
    while (!level.empty()) {
        depth++;
        int n = level.size();
        for (int i = 0; i < n; i++) {
            TreeNode* node = level.front();
            level.pop();
            if (node -> left) level.push(node -> left);
            if (node -> right) level.push(node -> right);
        }
    }
    return depth; 
}

# 68ms
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1
