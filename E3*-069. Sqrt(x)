/**********
69. Sqrt(x)

Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:
Input: 4
Output: 2

Example 2:
Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.
**********/

//0ms
//It is true that x_(k+1)=(x_(k) + n/x_(k))/2 larger than truncated sqrt(n) and x_(k) is monotonically decreasing.
int mySqrt(int x) {
    long r = x/2+1;     //take care of the condition that x is INT_MAX.
    while(r*r>x){
        r = (r+x/r)/2;
    }
    return r;
}

//easy to understand
int mySqrt(int x){
	int low = 0;
	int high = x;
	while (low < high)
	{
		int mid = (high - low) / 2 + low;
		if (mid * mid == x)
			return mid;
		else if (mid * mid > x)
			high = mid - 1;
		else
			low = mid + 1;
	}
	return low * low > x ? low - 1 : low;
}

//4ms
int mySqrt(int x) {
	double y = x;
	while(abs(-y + x / y) > 0.1)
	    y = 0.5 * (y + x / y);
	return (int)y * (int)y > x ? (int)y - 1 : (int)y;
}

# 28ms
def mySqrt(x):
	low = 0
	high = x
	while True:
	    mid = (low + high) // 2
	    if mid ** 2 <= x and (mid + 1) ** 2 > x:
			return mid
	    elif mid ** 2 > x:
			high = mid
	    else:
			low = mid + 1
