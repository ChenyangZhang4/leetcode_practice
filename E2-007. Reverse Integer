/**********
7. Reverse Integer

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:
Input: 123
Output: 321

Example 2:
Input: -123
Output: -321

Example 3:
Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
**********/

//4ms
int reverse(int x) {
    int flag;
    long X = x;
    if(X>=0){
        flag = 1;
    }
    else{
        flag = -1;
        X = -X;
    }
    vector<int> v;
    while(X>0){
        v.push_back(X%10);
        X /= 10;
    }
    long ret = 0;
    int i=0;
    while(i<v.size() && v[i]==0)
        i++;
    while(i<v.size()){
        ret = ret*10 + v[i];
        i++;
    }
    ret *= flag;
    if(ret>INT_MAX || ret<INT_MIN)
        return 0;
    return int(ret);
}

//0ms
int reverse(int x) {
    long out = 0;
    while (x){
        out = out * 10 + x % 10;
        x   = x / 10;
    }
    if (out >= INT_MIN && out <= INT_MAX){
        return out;
    }
    else {
        return 0;
    }
}

# 20ms
def reverse(x):
    if x==0:
        return 0
    sr=str(x)
    g=' '
    if sr[0]=='-':
        g=g+'-'
    g=g+sr[::-1].lstrip('0').rstrip('-')
    g=int(g)
    if -2**31 < g< 2**31-1:
        return g
    return 0
