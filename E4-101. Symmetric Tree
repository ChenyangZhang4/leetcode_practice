/**********
101. Symmetric Tree

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
**********/

bool IsSymHelper(TreeNode* p1, TreeNode* p2){
    if(!p1 && !p2)
        return true;
    if(!p1 || !p2)
        return false;
    if(p1->val == p2->val)
        return IsSymHelper(p1->left, p2->right) && IsSymHelper(p1->right, p2->left);
    return false;
}
bool isSymmetric(TreeNode* root) {
    if(!root)
        return true;
    return IsSymHelper(root->left, root->right);
}

# 24ms
class Solution(object):
    def isSymmetric(self, root):
        if not root:
            return True
        else:
            return self.isSymHelper(root.left, root.right)
    
    def isSymHelper(self, root1, root2):
        if not root1 and not root2 :
            return True
        if not root1 or not root2:
            return False
        if root1.val == root2.val:
            return self.isSymHelper(root1.left, root2.right) and self.isSymHelper(root1.right, root2.left)
        else:
            return False
