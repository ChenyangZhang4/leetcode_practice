/**********
64. Minimum Path Sum

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
**********/

//12ms
int minPathSum(vector<vector<int>>& grid) {
    vector<int> minSum(grid[0].size());
    minSum[0] = grid[0][0];
    for(int j=1; j<grid[0].size(); j++){
        minSum[j] = minSum[j-1] + grid[0][j];
    }
    for(int i=1; i<grid.size(); i++){
        minSum[0] += grid[i][0];
        for(int j=1; j<minSum.size(); j++){
            minSum[j] = min(minSum[j], minSum[j-1]) + grid[i][j];
        }
    }
    return minSum[minSum.size()-1];
}

//8ms
int minPathSum(vector<vector<int>>& grid) {
    int m=grid.size();
    if(m==0)
        return 0;
    int n = grid[0].size();
    if(n==0)
        return 0;
    for(int i=m-1;i>=0;i--) {
        for(int j=n-1;j>=0;j--) {
            if(i==m-1 && j==n-1)
                grid[i][j] = grid[i][j];
            else if(i==m-1)
                grid[i][j] = grid[i][j] + grid[i][j+1];
            else if(j==n-1)
                grid[i][j] = grid[i][j] + grid[i+1][j];
            else
                grid[i][j] = grid[i][j] + min(grid[i+1][j], grid[i][j+1]);
        }
    }
    return grid[0][0];
}
