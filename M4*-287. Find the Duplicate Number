/**********
287. Find the Duplicate Number

Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.
**********/

//O(n) time and O(n) space solution is easy. Not mentioning that.

//O(nlogn) time and O(1) space solution.
int findDuplicate(vector<int>& nums) {
    int n = nums.size(), i = 0, counter = 0;
    int left = 1, right = n - 1, mid = 0;
    while (left < right){
        mid = left + (right - left) / 2;
        counter = 0;
        for (i = 0; i < n; ++i){
            if (nums[i] <= mid)
                ++counter;
        }
        if (counter > mid)
            right = mid;
        else 
            left = mid + 1;
    }
    return left;
}

//O(1) space solution. Just like finding a entrance of a ring in a list.
////There is a law: length from begin to entrance = length from encounter to entrance + n * length of circle.
int findDuplicate(vector<int>& nums) {
    int slow = 0, fast = 0;
    while(1) {
        slow = nums[slow];
        fast = nums[nums[fast]];
        if(slow == fast)
            break;
    }
    slow = 0;
    while(slow != fast) {   
        slow = nums[slow];
        fast = nums[fast];
    }
    return slow;
}
