/**********
160. Intersection of Two Linked Lists

Write a program to find the node at which the intersection of two singly linked lists begins.

Notes:
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
**********/

//44ms. The length of A+B is equal to the length of B+A.
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    if (!headA || !headB) 
        return NULL;
    ListNode* A = headA;
    ListNode* B = headB;
    while (A != B) {
        A = A ? A->next : headB;
        B = B ? B->next : headA;
    }
    return A;       //if without intersection, A will be NULL;
}

//52ms
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    if(!headA || !headB)
        return NULL;
    int lenA=0, lenB=0;
    ListNode *temp1=headA, *temp2=headB;
    while(temp1){
        temp1 = temp1->next;
        lenA++;
    }
    while(temp2){
        temp2 = temp2->next;
        lenB++;
    }
    int dif = lenA - lenB;
    if(dif>0){
        temp1 = headA;
        temp2 = headB;
    }
    else{
        dif*=-1;
        temp1 = headB;
        temp2 = headA;
    }
    while(dif){
        temp1 = temp1->next;
        dif--;
    }
    while(temp1 != temp2){
        temp1 = temp1->next;
        temp2 = temp2->next;
    }
    return temp1;
}
