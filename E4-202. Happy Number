/**********
202. Happy Number

Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 

Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
**********/

//0ms
bool isHappy(int n) {
    unordered_set<int> record;
    while(record.find(n)==record.end()){
        record.insert(n);
        int temp=0;
        while(n != 0){
            temp += (n%10)*(n%10);
            n /= 10;
        }
        if(temp == 1)
            return true;
        n = temp;
    }
    return false;
}

//4ms. It has a rule that if it get into a cycle, 4 must be one element of the cycle.
bool isHappy(int n) {
    long long sum = 0;
    long long t = n;
    while (true) {
        while (t > 0) {
            sum += (t%10) * (t%10);
            t /= 10;
        }
        if (sum == 1) {
            return true;
        } else if (sum == 4) {
            return false;
        }
        t = sum;
        sum = 0;
    }
}

# 28ms
class Solution(object):
    def isHappy(self, n):
        n = str(n)
        visited = set()
        while 1:
            n = str(sum(int(i) ** 2 for i in n))
            if n == "1":
                return True
            if n in visited:
                return False
            visited.add(n)
