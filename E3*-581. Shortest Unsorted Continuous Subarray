/**********
581. Shortest Unsorted Continuous Subarray

Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
**********/

//44ms
int findUnsortedSubarray(vector<int>& nums) {
    vector<int> copy = nums;
    sort(copy.begin(), copy.end());
    int retS=0, retE=nums.size()-1;
    while(retS<retE){
        if(nums[retS]!=copy[retS])
            break;
        retS++;
    }
    while(retS<retE){
        if(nums[retE]!=copy[retE])
            break;
        retE--;
    }
    return retS==retE? 0 : retE-retS+1;
}

//36ms
int findUnsortedSubarray(vector<int>& nums) {
	if(nums.size()<=1) 
        return 0;
	int p1=0, p2=0;     // 1--find first k<0 index p1 and the last k<0 index p2
	for (int i = 1; i <= nums.size()-1; ++i){
		if(nums[i]-nums[i-1]<0){
			p1=i-1;
			break;
		}
	}
	for (int i = nums.size()-1; i >=1; --i){
		if(nums[i]-nums[i-1]<0){
			p2=i;
			break;
		}
	}
    if(p1==0&&p2==0) 
        return 0;
	int min=nums[p1], max=nums[p1];  // 2--find min and max in [p1,p2]
	for(int i=p1;i<=p2;++i){
		if(nums[i]<min)
			min=nums[i];
		if(nums[i]>max)
			max=nums[i];
	}
	int start=p1,end=p2;        // 3--find start and end index in [0,p1] and [p2,end]
	for (int i = p1; i >=0; --i){
		if(nums[i]>min)
			start=i;
	}
	for (int i = p2; i < nums.size(); ++i){
		if(nums[i]<max)
			end=i;
	}
	return end-start+1;     // 4--res=end-start
}

//32ms
int findUnsortedSubarray(vector<int> &nums) {
    int l = 0;
    int r = -1;
    int maxi = INT_MIN;
    int mini = INT_MAX;
    for (int i = 0, j = nums.size() - 1; j >= 0; ++i, --j) {
        maxi = max(maxi, nums[i]);
        if (maxi != nums[i]) {
            r = i;
        }
        mini = min(mini, nums[j]);
        if (mini != nums[j]) {
            l = j;
        }
    }
    return (r - l + 1);
}
