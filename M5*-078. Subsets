/**********
78. Subsets

Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.
**********/

//8ms
void SelectN(int from, int n, vector<int> &nums, vector<int> &temp, vector<vector<int> > &res){
    if(n==0){
        res.push_back(temp);
        return;
    }
    for(int j=from; j<nums.size(); j++){
        temp.push_back(nums[j]);
        SelectN(j+1, n-1, nums, temp, res);
        temp.pop_back();
    }
}
vector<vector<int>> subsets(vector<int>& nums) {
    vector<vector<int> > res;
    sort(nums.begin(), nums.end());
    vector<int> temp;
    for(int i=0; i<=nums.size(); i++){
        SelectN(0, i, nums, temp, res);
    }
    return res;
}

# 20ms
def selectN(n, i, nums, ret, sub):
    if n == 0:
        ret.append(sub[:])      # Slice is a new object. If not, the value in ret will change when sub changes.
        return
    while i + n <= len(nums):
        sub.append(nums[i])
        i += 1
        selectN(n - 1, i, nums, ret, sub)
        sub.pop()
def subsets(nums):
    ret = [[]]
    sub = []
    n = 1
    while n <= len(nums):
        selectN(n, 0, nums, ret, sub)
        n += 1
    return ret

# 50ms
def subsets(nums):
    ret = [[]]
    for x in nums:
        ret += [sub + [x] for sub in ret]
    return ret
