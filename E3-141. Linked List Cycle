/**********
141. Linked List Cycle

Given a linked list, determine if it has a cycle in it.
**********/

//8ms
bool hasCycle(ListNode *head) {
    if(!head)
        return false;
    ListNode* low = head;       //do not need low=head->next;
    ListNode* fast = head->next;
    while(low != fast){
        if(fast==NULL || fast->next==NULL){
            return false;
        }
        low = low->next;
        fast = fast->next->next;
    }
    return true;
}

//8ms
bool hasCycle(ListNode *head) {
    ListNode *fastPtr=head, *slowPtr=head;

    while(fastPtr!=nullptr) {
        fastPtr = fastPtr->next;
        slowPtr = slowPtr->next;
        if(fastPtr==nullptr) 
            return false;
        else 
            fastPtr = fastPtr->next;
        if(fastPtr == slowPtr) 
            return true;
    }
    return false;
}
