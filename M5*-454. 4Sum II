/**********
454. 4Sum II

Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.

To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.

Example:

Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

Output:
2

Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
**********/

//256ms
int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
    unordered_map<int, int> abSum;
    int ret=0;
    for(int a:A){
        for(int b:B){
            abSum[a+b]++;
        }
    }
    for(int c:C){
        for(int d:D){
            ret += abSum[0 - c - d];
        }
    }
    return ret;
}

//152ms. Small change.
int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
    unordered_map<int, int> countMap;
    for (auto a : A) {
        for (auto b : B) {
            ++countMap[a+b];
        }
    }
    int count = 0;
    for (auto c: C) {
        for (auto d : D) {
            if (countMap.find(0-c-d) != countMap.end()) {
                count += countMap[0-c-d];
            }
        }
    }
    return count;
}
