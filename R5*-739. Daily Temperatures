/**********
739. Daily Temperatures

Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.

For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].

Note: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100].
**********/

//700ms
vector<int> dailyTemperatures(vector<int>& T) {
    vector<int> res(T.size(), 0);
    int i=0, j=1;
    for(; j<T.size(); j++){
        if(T[i]<T[j]){
            res[i]=j-i;
            break;
        }
    }
    for(i=1; i<T.size()-1; i++){
        if(T[i]>=T[i-1]){
            if(res[i-1]==0)
                continue;
            else
                j=i-1+res[i-1];
        }
        else
            j=i+1;
        for(; j<T.size(); j++){
            if(T[i]<T[j]){
                res[i]=j-i;
                break;
            }
        }
    }
    return res;
}

//244ms
vector<int> dailyTemperatures(vector<int>& T) {
    int n = T.size();
    vector<int>res(n);
    stack<vector<int>>s;   // stack of <temperature, index>
    for(int i = 0; i < n; i++){
        while(!s.empty() && T[i] > s.top()[0]){
            res[s.top()[1]] = i - s.top()[1];
            s.pop();
        }
        s.push({T[i], i});
    }
    return res;
}

//Recommended! 200ms
vector<int> dailyTemperatures(vector<int>& T) {
    int n = T.size();
    vector<int> res(n,0);
    stack<pair<int, int> > s;   //faster than using vector as the element
    for(int i = 0; i < n; i++){
        while(!s.empty() && T[i] > s.top().first){
            res[s.top().second] = i - s.top().second;
            s.pop();
        }
        s.push({T[i], i});
    }
    return res;
}
