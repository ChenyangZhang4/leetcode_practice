/**********
206. Reverse Linked List

Reverse a singly linked list.
**********/

// 8ms
ListNode* reverseList(ListNode* head) {
    if(!head)
        return NULL;
    ListNode* reverseHead = NULL;
    ListNode* temp;
    while(head){
        temp = head->next;
        head->next = reverseHead;
        reverseHead = head;
        head = temp;
    }
    return reverseHead;
}

//Recursive solution need to creat a function with two parameters.

# 64ms
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        pre = None
        while head:
            pre, head.next, head = head, pre, head.next
        return pre
