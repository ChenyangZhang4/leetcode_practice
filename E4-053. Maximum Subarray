/**********
53. Maximum Subarray

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
**********/

int maxSubArray(vector<int>& nums) {
    if(nums.size()==0)
        return 0;
    if(nums.size()==1)
        return nums[0];
    int maxSum=nums[0];
    int tempSum=nums[0];
    for(int i=1; i<nums.size(); i++){
        tempSum = tempSum+nums[i]>nums[i]?tempSum+nums[i]:nums[i];
        maxSum = maxSum>=tempSum?maxSum:tempSum;
    }
    return maxSum;
}

# 60ms
class Solution(object):
    def maxSubArray(self, nums):
        if not nums: 
            return 0
        temp, dp = nums[0], 0
        for num in nums:
            dp = dp + num if dp > 0 else num
            temp = max(temp, dp)
        return temp
